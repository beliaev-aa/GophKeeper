// Code generated by MockGen. DO NOT EDIT.
// Source: internal/server/service/secretService.go

// Package mocks is a generated GoMock package.
package mocks

import (
	models "beliaev-aa/GophKeeper/pkg/models"
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockISecretService is a mock of ISecretService interface.
type MockISecretService struct {
	ctrl     *gomock.Controller
	recorder *MockISecretServiceMockRecorder
}

// MockISecretServiceMockRecorder is the mock recorder for MockISecretService.
type MockISecretServiceMockRecorder struct {
	mock *MockISecretService
}

// NewMockISecretService creates a new mock instance.
func NewMockISecretService(ctrl *gomock.Controller) *MockISecretService {
	mock := &MockISecretService{ctrl: ctrl}
	mock.recorder = &MockISecretServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockISecretService) EXPECT() *MockISecretServiceMockRecorder {
	return m.recorder
}

// CreateSecret mocks base method.
func (m *MockISecretService) CreateSecret(ctx context.Context, secret *models.Secret) (*models.Secret, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSecret", ctx, secret)
	ret0, _ := ret[0].(*models.Secret)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateSecret indicates an expected call of CreateSecret.
func (mr *MockISecretServiceMockRecorder) CreateSecret(ctx, secret interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSecret", reflect.TypeOf((*MockISecretService)(nil).CreateSecret), ctx, secret)
}

// DeleteSecret mocks base method.
func (m *MockISecretService) DeleteSecret(ctx context.Context, secretID, userID uint64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteSecret", ctx, secretID, userID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteSecret indicates an expected call of DeleteSecret.
func (mr *MockISecretServiceMockRecorder) DeleteSecret(ctx, secretID, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSecret", reflect.TypeOf((*MockISecretService)(nil).DeleteSecret), ctx, secretID, userID)
}

// GetSecret mocks base method.
func (m *MockISecretService) GetSecret(ctx context.Context, secretID, userID uint64) (*models.Secret, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSecret", ctx, secretID, userID)
	ret0, _ := ret[0].(*models.Secret)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSecret indicates an expected call of GetSecret.
func (mr *MockISecretServiceMockRecorder) GetSecret(ctx, secretID, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSecret", reflect.TypeOf((*MockISecretService)(nil).GetSecret), ctx, secretID, userID)
}

// GetUserSecrets mocks base method.
func (m *MockISecretService) GetUserSecrets(ctx context.Context, userID uint64) (models.Secrets, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserSecrets", ctx, userID)
	ret0, _ := ret[0].(models.Secrets)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserSecrets indicates an expected call of GetUserSecrets.
func (mr *MockISecretServiceMockRecorder) GetUserSecrets(ctx, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserSecrets", reflect.TypeOf((*MockISecretService)(nil).GetUserSecrets), ctx, userID)
}

// UpdateSecret mocks base method.
func (m *MockISecretService) UpdateSecret(ctx context.Context, secret *models.Secret) (*models.Secret, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateSecret", ctx, secret)
	ret0, _ := ret[0].(*models.Secret)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateSecret indicates an expected call of UpdateSecret.
func (mr *MockISecretServiceMockRecorder) UpdateSecret(ctx, secret interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateSecret", reflect.TypeOf((*MockISecretService)(nil).UpdateSecret), ctx, secret)
}
