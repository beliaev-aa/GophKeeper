// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/proto/secrets_grpc.pb.go

// Package mocks is a generated GoMock package.
package mocks

import (
	proto "beliaev-aa/GophKeeper/pkg/proto"
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	grpc "google.golang.org/grpc"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// MockSecretsClient is a mock of SecretsClient interface.
type MockSecretsClient struct {
	ctrl     *gomock.Controller
	recorder *MockSecretsClientMockRecorder
}

// MockSecretsClientMockRecorder is the mock recorder for MockSecretsClient.
type MockSecretsClientMockRecorder struct {
	mock *MockSecretsClient
}

// NewMockSecretsClient creates a new mock instance.
func NewMockSecretsClient(ctrl *gomock.Controller) *MockSecretsClient {
	mock := &MockSecretsClient{ctrl: ctrl}
	mock.recorder = &MockSecretsClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSecretsClient) EXPECT() *MockSecretsClientMockRecorder {
	return m.recorder
}

// DeleteUserSecret mocks base method.
func (m *MockSecretsClient) DeleteUserSecret(ctx context.Context, in *proto.DeleteUserSecretRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteUserSecret", varargs...)
	ret0, _ := ret[0].(*emptypb.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteUserSecret indicates an expected call of DeleteUserSecret.
func (mr *MockSecretsClientMockRecorder) DeleteUserSecret(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUserSecret", reflect.TypeOf((*MockSecretsClient)(nil).DeleteUserSecret), varargs...)
}

// GetUserSecret mocks base method.
func (m *MockSecretsClient) GetUserSecret(ctx context.Context, in *proto.GetUserSecretRequest, opts ...grpc.CallOption) (*proto.GetUserSecretResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetUserSecret", varargs...)
	ret0, _ := ret[0].(*proto.GetUserSecretResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserSecret indicates an expected call of GetUserSecret.
func (mr *MockSecretsClientMockRecorder) GetUserSecret(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserSecret", reflect.TypeOf((*MockSecretsClient)(nil).GetUserSecret), varargs...)
}

// GetUserSecrets mocks base method.
func (m *MockSecretsClient) GetUserSecrets(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*proto.GetUserSecretsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetUserSecrets", varargs...)
	ret0, _ := ret[0].(*proto.GetUserSecretsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserSecrets indicates an expected call of GetUserSecrets.
func (mr *MockSecretsClientMockRecorder) GetUserSecrets(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserSecrets", reflect.TypeOf((*MockSecretsClient)(nil).GetUserSecrets), varargs...)
}

// SaveUserSecret mocks base method.
func (m *MockSecretsClient) SaveUserSecret(ctx context.Context, in *proto.SaveUserSecretRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SaveUserSecret", varargs...)
	ret0, _ := ret[0].(*emptypb.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SaveUserSecret indicates an expected call of SaveUserSecret.
func (mr *MockSecretsClientMockRecorder) SaveUserSecret(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveUserSecret", reflect.TypeOf((*MockSecretsClient)(nil).SaveUserSecret), varargs...)
}

// MockSecretsServer is a mock of SecretsServer interface.
type MockSecretsServer struct {
	ctrl     *gomock.Controller
	recorder *MockSecretsServerMockRecorder
}

// MockSecretsServerMockRecorder is the mock recorder for MockSecretsServer.
type MockSecretsServerMockRecorder struct {
	mock *MockSecretsServer
}

// NewMockSecretsServer creates a new mock instance.
func NewMockSecretsServer(ctrl *gomock.Controller) *MockSecretsServer {
	mock := &MockSecretsServer{ctrl: ctrl}
	mock.recorder = &MockSecretsServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSecretsServer) EXPECT() *MockSecretsServerMockRecorder {
	return m.recorder
}

// DeleteUserSecret mocks base method.
func (m *MockSecretsServer) DeleteUserSecret(arg0 context.Context, arg1 *proto.DeleteUserSecretRequest) (*emptypb.Empty, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteUserSecret", arg0, arg1)
	ret0, _ := ret[0].(*emptypb.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteUserSecret indicates an expected call of DeleteUserSecret.
func (mr *MockSecretsServerMockRecorder) DeleteUserSecret(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUserSecret", reflect.TypeOf((*MockSecretsServer)(nil).DeleteUserSecret), arg0, arg1)
}

// GetUserSecret mocks base method.
func (m *MockSecretsServer) GetUserSecret(arg0 context.Context, arg1 *proto.GetUserSecretRequest) (*proto.GetUserSecretResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserSecret", arg0, arg1)
	ret0, _ := ret[0].(*proto.GetUserSecretResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserSecret indicates an expected call of GetUserSecret.
func (mr *MockSecretsServerMockRecorder) GetUserSecret(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserSecret", reflect.TypeOf((*MockSecretsServer)(nil).GetUserSecret), arg0, arg1)
}

// GetUserSecrets mocks base method.
func (m *MockSecretsServer) GetUserSecrets(arg0 context.Context, arg1 *emptypb.Empty) (*proto.GetUserSecretsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserSecrets", arg0, arg1)
	ret0, _ := ret[0].(*proto.GetUserSecretsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserSecrets indicates an expected call of GetUserSecrets.
func (mr *MockSecretsServerMockRecorder) GetUserSecrets(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserSecrets", reflect.TypeOf((*MockSecretsServer)(nil).GetUserSecrets), arg0, arg1)
}

// SaveUserSecret mocks base method.
func (m *MockSecretsServer) SaveUserSecret(arg0 context.Context, arg1 *proto.SaveUserSecretRequest) (*emptypb.Empty, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveUserSecret", arg0, arg1)
	ret0, _ := ret[0].(*emptypb.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SaveUserSecret indicates an expected call of SaveUserSecret.
func (mr *MockSecretsServerMockRecorder) SaveUserSecret(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveUserSecret", reflect.TypeOf((*MockSecretsServer)(nil).SaveUserSecret), arg0, arg1)
}

// mustEmbedUnimplementedSecretsServer mocks base method.
func (m *MockSecretsServer) mustEmbedUnimplementedSecretsServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedSecretsServer")
}

// mustEmbedUnimplementedSecretsServer indicates an expected call of mustEmbedUnimplementedSecretsServer.
func (mr *MockSecretsServerMockRecorder) mustEmbedUnimplementedSecretsServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedSecretsServer", reflect.TypeOf((*MockSecretsServer)(nil).mustEmbedUnimplementedSecretsServer))
}

// MockUnsafeSecretsServer is a mock of UnsafeSecretsServer interface.
type MockUnsafeSecretsServer struct {
	ctrl     *gomock.Controller
	recorder *MockUnsafeSecretsServerMockRecorder
}

// MockUnsafeSecretsServerMockRecorder is the mock recorder for MockUnsafeSecretsServer.
type MockUnsafeSecretsServerMockRecorder struct {
	mock *MockUnsafeSecretsServer
}

// NewMockUnsafeSecretsServer creates a new mock instance.
func NewMockUnsafeSecretsServer(ctrl *gomock.Controller) *MockUnsafeSecretsServer {
	mock := &MockUnsafeSecretsServer{ctrl: ctrl}
	mock.recorder = &MockUnsafeSecretsServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUnsafeSecretsServer) EXPECT() *MockUnsafeSecretsServerMockRecorder {
	return m.recorder
}

// mustEmbedUnimplementedSecretsServer mocks base method.
func (m *MockUnsafeSecretsServer) mustEmbedUnimplementedSecretsServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedSecretsServer")
}

// mustEmbedUnimplementedSecretsServer indicates an expected call of mustEmbedUnimplementedSecretsServer.
func (mr *MockUnsafeSecretsServerMockRecorder) mustEmbedUnimplementedSecretsServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedSecretsServer", reflect.TypeOf((*MockUnsafeSecretsServer)(nil).mustEmbedUnimplementedSecretsServer))
}
